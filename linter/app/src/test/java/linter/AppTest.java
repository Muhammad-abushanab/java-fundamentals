/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void sendFile_With_OneError_ReturnOnlyOneError() {
        App sut = new App();
        Path file = Path.of("./src/test/resources/oneError.js");
//        System.out.println(System.getProperty("user.dir"));
        List<String> errors = sut.findMissingSemicolons(file);
        List<String> expected = new ArrayList<>();
        expected.add("Line 4: Missing semicolon.");
        Assertions.assertEquals(expected, errors);
//
    }

    @Test
    void sendFile_With_NoError_ReturnNoError() {
        App sut = new App();
//        System.out.println(System.getProperty("user.dir"));
        Path file = Path.of("./src/test/resources/noError.js");
        List<String> errors = sut.findMissingSemicolons(file);
        List<String> expected = new ArrayList<>();
        Assertions.assertEquals(expected, errors);
    }

    @Test
    void sendFile_With_FewErrors_ReturnFewErrors() {
        App sut = new App();
        Path file = Path.of("./src/test/resources/fewErros.js");
        List<String> errors = sut.findMissingSemicolons(file);
        List<String> expected = new ArrayList<>();
        expected.add("Line 3: Missing semicolon.");
        expected.add("Line 5: Missing semicolon.");
        expected.add("Line 9: Missing semicolon.");
        expected.add("Line 13: Missing semicolon.");
        expected.add("Line 17: Missing semicolon.");
        expected.add("Line 18: Missing semicolon.");
        Assertions.assertEquals(expected, errors);
    }

    @Test
    void send_emptyFile_Return() {
        App sut = new App();
        Path file = Path.of("./src/test/resources/empty.js");
        List<String> errors = sut.findMissingSemicolons(file);
        List<String> expected = new ArrayList<>();
        Assertions.assertEquals(expected, errors);
    }
}
